import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Trash2, Plus, Edit2, Pencil } from 'lucide-react';
import { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors, DragEndEvent } from '@dnd-kit/core';
import { arrayMove, SortableContext, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';

interface PointRecord {
  date: string;
  balanceReward: number;
  tradeReward: number;
  activityPoints: number;
  claimCost: number;
}

interface CostRecord {
  date: string;
  fee: number;
}

interface RevenueRecord {
  date: string;
  amount: number;
}

interface User {
  id: string;
  name: string;
  pointRecords: PointRecord[];
  costRecords: CostRecord[];
  revenueRecords: RevenueRecord[];
}

function SortableUserCard({ user, isSelected, onSelect, onDelete, onEdit, points }: {
  user: User;
  isSelected: boolean;
  onSelect: () => void;
  onDelete: (e: React.MouseEvent) => void;
  onEdit: (e: React.MouseEvent) => void;
  points: number;
}) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
  } = useSortable({ id: user.id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  };

  return (
    <div
      ref={setNodeRef}
      style={style}
      className={`p-3 border-2 rounded-lg transition-colors ${
        isSelected
          ? 'border-primary bg-accent'
          : 'border-border hover:border-primary/50'
      }`}
    >
      <div className="flex justify-between items-center mb-1">
        <span
          className="font-medium cursor-pointer flex-1"
          onClick={onSelect}
        >
          {user.name}
        </span>
        <div className="flex items-center gap-1">
          <div {...attributes} {...listeners} className="cursor-move p-1">
            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" className="opacity-40">
              <circle cx="4" cy="4" r="1.5"/>
              <circle cx="12" cy="4" r="1.5"/>
              <circle cx="4" cy="8" r="1.5"/>
              <circle cx="12" cy="8" r="1.5"/>
              <circle cx="4" cy="12" r="1.5"/>
              <circle cx="12" cy="12" r="1.5"/>
            </svg>
          </div>
          <Button
            variant="ghost"
            size="icon"
            onClick={onEdit}
            className="h-6 w-6"
          >
            <Pencil className="h-3 w-3" />
          </Button>
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                onClick={(e) => e.stopPropagation()}
                className="h-6 w-6"
              >
                <Trash2 className="h-4 w-4 text-destructive" />
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>确认删除</AlertDialogTitle>
                <AlertDialogDescription>
                  确定要删除用户 "{user.name}" 吗？此操作将删除该用户的所有数据且无法恢复。
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>取消</AlertDialogCancel>
                <AlertDialogAction onClick={onDelete}>删除</AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </div>
      </div>
      <div
        className="text-sm text-blue-600 font-semibold cursor-pointer"
        onClick={onSelect}
      >
        积分: {points}
      </div>
    </div>
  );
}

export default function Home() {
  const [users, setUsers] = useState<User[]>([]);
  const [selectedUserId, setSelectedUserId] = useState<string>('');
  const [newUserName, setNewUserName] = useState('');
  const [editingUserId, setEditingUserId] = useState<string>('');
  const [editingUserName, setEditingUserName] = useState('');
  const [activeTab, setActiveTab] = useState<'points' | 'costs' | 'revenue'>('points');

  const [pointForm, setPointForm] = useState({
    date: new Date().toISOString().split('T')[0],
    balanceReward: 0,
    tradeReward: 0,
    activityPoints: 0,
    claimCost: 0,
  });

  const [costForm, setCostForm] = useState({
    date: new Date().toISOString().split('T')[0],
    fee: 0,
  });

  const [revenueForm, setRevenueForm] = useState({
    date: new Date().toISOString().split('T')[0],
    amount: 0,
  });

  useEffect(() => {
    const savedUsers = localStorage.getItem('bnAlphaUsers');
    if (savedUsers) {
      setUsers(JSON.parse(savedUsers));
    }
  }, []);

  useEffect(() => {
    if (users.length > 0) {
      localStorage.setItem('bnAlphaUsers', JSON.stringify(users));
    }
  }, [users]);

  const addUser = () => {
    if (newUserName.trim()) {
      const newUser: User = {
        id: Date.now().toString(),
        name: newUserName,
        pointRecords: [],
        costRecords: [],
        revenueRecords: [],
      };
      setUsers([...users, newUser]);
      setNewUserName('');
    }
  };

  const deleteUser = (userId: string) => {
    setUsers(users.filter(u => u.id !== userId));
    if (selectedUserId === userId) {
      setSelectedUserId('');
    }
  };

  const startEditUser = (userId: string, userName: string) => {
    setEditingUserId(userId);
    setEditingUserName(userName);
  };

  const saveEditUser = () => {
    if (editingUserName.trim() && editingUserId) {
      setUsers(users.map(u =>
        u.id === editingUserId ? { ...u, name: editingUserName.trim() } : u
      ));
      setEditingUserId('');
      setEditingUserName('');
    }
  };

  const cancelEditUser = () => {
    setEditingUserId('');
    setEditingUserName('');
  };

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    if (over && active.id !== over.id) {
      setUsers((items) => {
        const oldIndex = items.findIndex((item) => item.id === active.id);
        const newIndex = items.findIndex((item) => item.id === over.id);
        return arrayMove(items, oldIndex, newIndex);
      });
    }
  };

  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  const addPointRecord = () => {
    if (!selectedUserId) return;

    setUsers(users.map(u => {
      if (u.id === selectedUserId) {
        const existingIndex = u.pointRecords.findIndex(r => r.date === pointForm.date);
        if (existingIndex >= 0) {
          const updated = [...u.pointRecords];
          updated[existingIndex] = pointForm;
          return { ...u, pointRecords: updated };
        }
        return { ...u, pointRecords: [...u.pointRecords, pointForm] };
      }
      return u;
    }));

    setPointForm({
      date: new Date().toISOString().split('T')[0],
      balanceReward: 0,
      tradeReward: 0,
      activityPoints: 0,
      claimCost: 0,
    });
  };

  const deletePointRecord = (date: string) => {
    if (!selectedUserId) return;
    setUsers(users.map(u => {
      if (u.id === selectedUserId) {
        return { ...u, pointRecords: u.pointRecords.filter(r => r.date !== date) };
      }
      return u;
    }));
  };

  const editPointRecord = (record: PointRecord) => {
    setPointForm(record);
  };

  const addCostRecord = () => {
    if (!selectedUserId) return;

    setUsers(users.map(u => {
      if (u.id === selectedUserId) {
        const existingIndex = u.costRecords.findIndex(r => r.date === costForm.date);
        if (existingIndex >= 0) {
          const updated = [...u.costRecords];
          updated[existingIndex] = costForm;
          return { ...u, costRecords: updated };
        }
        return { ...u, costRecords: [...u.costRecords, costForm] };
      }
      return u;
    }));

    setCostForm({
      date: new Date().toISOString().split('T')[0],
      fee: 0,
    });
  };

  const deleteCostRecord = (date: string) => {
    if (!selectedUserId) return;
    setUsers(users.map(u => {
      if (u.id === selectedUserId) {
        return { ...u, costRecords: u.costRecords.filter(r => r.date !== date) };
      }
      return u;
    }));
  };

  const editCostRecord = (record: CostRecord) => {
    setCostForm(record);
  };

  const addRevenueRecord = () => {
    if (!selectedUserId) return;

    setUsers(users.map(u => {
      if (u.id === selectedUserId) {
        const existingIndex = u.revenueRecords.findIndex(r => r.date === revenueForm.date);
        if (existingIndex >= 0) {
          const updated = [...u.revenueRecords];
          updated[existingIndex] = revenueForm;
          return { ...u, revenueRecords: updated };
        }
        return { ...u, revenueRecords: [...u.revenueRecords, revenueForm] };
      }
      return u;
    }));

    setRevenueForm({
      date: new Date().toISOString().split('T')[0],
      amount: 0,
    });
  };

  const deleteRevenueRecord = (date: string) => {
    if (!selectedUserId) return;
    setUsers(users.map(u => {
      if (u.id === selectedUserId) {
        return { ...u, revenueRecords: u.revenueRecords.filter(r => r.date !== date) };
      }
      return u;
    }));
  };

  const editRevenueRecord = (record: RevenueRecord) => {
    setRevenueForm(record);
  };

  const getCurrentCyclePoints = (records: PointRecord[]) => {
    const today = new Date().toISOString().split('T')[0];
    const todayDate = new Date(today);
    const fifteenDaysAgo = new Date(todayDate);
    fifteenDaysAgo.setDate(todayDate.getDate() - 15);
    const cutoffDate = fifteenDaysAgo.toISOString().split('T')[0];

    const cycleRecords = records.filter(r => r.date >= cutoffDate && r.date < today);

    const totalBalance = cycleRecords.reduce((sum, r) => sum + r.balanceReward, 0);
    const totalTrade = cycleRecords.reduce((sum, r) => sum + r.tradeReward, 0);
    const totalActivity = cycleRecords.reduce((sum, r) => sum + r.activityPoints, 0);
    const totalClaim = cycleRecords.reduce((sum, r) => sum + r.claimCost, 0);

    return totalBalance + totalTrade + totalActivity - totalClaim;
  };

  const getTomorrowPreviewPoints = (records: PointRecord[]) => {
    const today = new Date();
    const todayDate = today.toISOString().split('T')[0];

    const todayRecord = records.find(r => r.date === todayDate);
    if (!todayRecord) return null;

    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);

    const fifteenDaysFromTomorrow = new Date(tomorrow);
    fifteenDaysFromTomorrow.setDate(tomorrow.getDate() - 15);
    const cutoffDate = fifteenDaysFromTomorrow.toISOString().split('T')[0];

    const cycleRecords = records.filter(r => r.date >= cutoffDate && r.date <= todayDate);

    const totalBalance = cycleRecords.reduce((sum, r) => sum + r.balanceReward, 0);
    const totalTrade = cycleRecords.reduce((sum, r) => sum + r.tradeReward, 0);
    const totalActivity = cycleRecords.reduce((sum, r) => sum + r.activityPoints, 0);
    const totalClaim = cycleRecords.reduce((sum, r) => sum + r.claimCost, 0);

    return totalBalance + totalTrade + totalActivity - totalClaim;
  };

  const calculatePeriodStats = (records: { date: string; fee?: number; amount?: number }[], days: number) => {
    const now = new Date();
    const startDate = new Date(now);
    startDate.setDate(now.getDate() - days);

    return records
      .filter(r => new Date(r.date) >= startDate)
      .reduce((sum, r) => sum + (r.fee || r.amount || 0), 0);
  };

  const selectedUser = users.find(u => u.id === selectedUserId);

  const calculateAllUsersPeriodStats = (type: 'cost' | 'revenue', days: number) => {
    return users.reduce((total, user) => {
      const records = type === 'cost' ? user.costRecords : user.revenueRecords;
      return total + calculatePeriodStats(records, days);
    }, 0);
  };

  const getAllDates = () => {
    const datesSet = new Set<string>();
    users.forEach(user => {
      user.pointRecords.forEach(r => datesSet.add(r.date));
      user.costRecords.forEach(r => datesSet.add(r.date));
      user.revenueRecords.forEach(r => datesSet.add(r.date));
    });
    return Array.from(datesSet).sort((a, b) => b.localeCompare(a));
  };

  const updatePointCell = (userId: string, date: string, field: keyof PointRecord, value: number) => {
    setUsers(users.map(u => {
      if (u.id === userId) {
        const existingIndex = u.pointRecords.findIndex(r => r.date === date);
        if (existingIndex >= 0) {
          const updated = [...u.pointRecords];
          updated[existingIndex] = { ...updated[existingIndex], [field]: value };
          return { ...u, pointRecords: updated };
        } else {
          const newRecord: PointRecord = {
            date,
            balanceReward: 0,
            tradeReward: 0,
            activityPoints: 0,
            claimCost: 0,
            [field]: value
          };
          return { ...u, pointRecords: [...u.pointRecords, newRecord] };
        }
      }
      return u;
    }));
  };

  const updateCostCell = (userId: string, date: string, value: number) => {
    setUsers(users.map(u => {
      if (u.id === userId) {
        const existingIndex = u.costRecords.findIndex(r => r.date === date);
        if (existingIndex >= 0) {
          const updated = [...u.costRecords];
          updated[existingIndex] = { date, fee: value };
          return { ...u, costRecords: updated };
        } else {
          return { ...u, costRecords: [...u.costRecords, { date, fee: value }] };
        }
      }
      return u;
    }));
  };

  const updateRevenueCell = (userId: string, date: string, value: number) => {
    setUsers(users.map(u => {
      if (u.id === userId) {
        const existingIndex = u.revenueRecords.findIndex(r => r.date === date);
        if (existingIndex >= 0) {
          const updated = [...u.revenueRecords];
          updated[existingIndex] = { date, amount: value };
          return { ...u, revenueRecords: updated };
        } else {
          return { ...u, revenueRecords: [...u.revenueRecords, { date, amount: value }] };
        }
      }
      return u;
    }));
  };

  const [newDate, setNewDate] = useState(new Date().toISOString().split('T')[0]);

  const calculateAllUsersTotal = (type: 'cost' | 'revenue') => {
    return users.reduce((total, user) => {
      const records = type === 'cost' ? user.costRecords : user.revenueRecords;
      return total + records.reduce((sum, r) => sum + (type === 'cost' ? r.fee : r.amount), 0);
    }, 0);
  };

  return (
    <div className="min-h-screen p-4 md:p-8" style={{ backgroundColor: 'hsl(var(--background))', color: 'hsl(var(--foreground))' }}>
      <div className="max-w-7xl mx-auto space-y-6">
        <h1 className="text-3xl font-bold mb-8">BN Alpha 多用户管理工具</h1>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>所有用户总磨损</CardTitle>
              <CardDescription>所有账户的总成本统计</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div className="text-center">
                  <p className="text-xs text-muted-foreground">周期（15天）</p>
                  <p className="text-lg font-bold text-red-600">
                    ${calculateAllUsersPeriodStats('cost', 15).toFixed(2)}
                  </p>
                </div>
                <div className="text-center">
                  <p className="text-xs text-muted-foreground">月（30天）</p>
                  <p className="text-lg font-bold text-red-600">
                    ${calculateAllUsersPeriodStats('cost', 30).toFixed(2)}
                  </p>
                </div>
                <div className="text-center">
                  <p className="text-xs text-muted-foreground">季度（90天）</p>
                  <p className="text-lg font-bold text-red-600">
                    ${calculateAllUsersPeriodStats('cost', 90).toFixed(2)}
                  </p>
                </div>
                <div className="text-center">
                  <p className="text-xs text-muted-foreground">年（365天）</p>
                  <p className="text-lg font-bold text-red-600">
                    ${calculateAllUsersPeriodStats('cost', 365).toFixed(2)}
                  </p>
                </div>
              </div>
              <div className="pt-4 border-t">
                <p className="text-center text-sm text-muted-foreground">总磨损</p>
                <p className="text-center text-2xl font-bold text-red-700">
                  ${calculateAllUsersTotal('cost').toFixed(2)}
                </p>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>所有用户总收益</CardTitle>
              <CardDescription>所有账户的总收入统计</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div className="text-center">
                  <p className="text-xs text-muted-foreground">周期（15天）</p>
                  <p className="text-lg font-bold text-green-600">
                    ${calculateAllUsersPeriodStats('revenue', 15).toFixed(2)}
                  </p>
                </div>
                <div className="text-center">
                  <p className="text-xs text-muted-foreground">月（30天）</p>
                  <p className="text-lg font-bold text-green-600">
                    ${calculateAllUsersPeriodStats('revenue', 30).toFixed(2)}
                  </p>
                </div>
                <div className="text-center">
                  <p className="text-xs text-muted-foreground">季度（90天）</p>
                  <p className="text-lg font-bold text-green-600">
                    ${calculateAllUsersPeriodStats('revenue', 90).toFixed(2)}
                  </p>
                </div>
                <div className="text-center">
                  <p className="text-xs text-muted-foreground">年（365天）</p>
                  <p className="text-lg font-bold text-green-600">
                    ${calculateAllUsersPeriodStats('revenue', 365).toFixed(2)}
                  </p>
                </div>
              </div>
              <div className="pt-4 border-t">
                <p className="text-center text-sm text-muted-foreground">总收益</p>
                <p className="text-center text-2xl font-bold text-green-700">
                  ${calculateAllUsersTotal('revenue').toFixed(2)}
                </p>
              </div>
            </CardContent>
          </Card>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>用户管理</CardTitle>
            <CardDescription>添加和管理多个账户</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-2 mb-4">
              <Input
                type="text"
                value={newUserName}
                onChange={(e) => setNewUserName(e.target.value)}
                placeholder="输入用户名"
                onKeyPress={(e) => e.key === 'Enter' && addUser()}
              />
              <Button onClick={addUser}>
                <Plus className="h-4 w-4 mr-2" />
                添加用户
              </Button>
            </div>

            <DndContext
              sensors={sensors}
              collisionDetection={closestCenter}
              onDragEnd={handleDragEnd}
            >
              <SortableContext items={users.map(u => u.id)} strategy={verticalListSortingStrategy}>
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                  {users.map(user => (
                    <SortableUserCard
                      key={user.id}
                      user={user}
                      isSelected={selectedUserId === user.id}
                      onSelect={() => setSelectedUserId(user.id)}
                      onEdit={(e) => {
                        e.stopPropagation();
                        startEditUser(user.id, user.name);
                      }}
                      onDelete={(e) => {
                        e.stopPropagation();
                        deleteUser(user.id);
                      }}
                      points={getCurrentCyclePoints(user.pointRecords)}
                    />
                  ))}
                </div>
              </SortableContext>
            </DndContext>
          </CardContent>
        </Card>

        <AlertDialog open={!!editingUserId} onOpenChange={(open) => !open && cancelEditUser()}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>编辑用户名</AlertDialogTitle>
              <AlertDialogDescription>
                修改用户名称
              </AlertDialogDescription>
            </AlertDialogHeader>
            <Input
              value={editingUserName}
              onChange={(e) => setEditingUserName(e.target.value)}
              placeholder="输入新用户名"
              onKeyPress={(e) => e.key === 'Enter' && saveEditUser()}
            />
            <AlertDialogFooter>
              <AlertDialogCancel onClick={cancelEditUser}>取消</AlertDialogCancel>
              <AlertDialogAction onClick={saveEditUser}>保存</AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>

        {users.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle>数据管理 - Excel视图</CardTitle>
              <CardDescription>直接在表格中编辑所有用户的数据</CardDescription>
            </CardHeader>
            <CardContent>
              <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'points' | 'costs' | 'revenue')}>
                <TabsList className="grid w-full grid-cols-3">
                  <TabsTrigger value="points">积分系统</TabsTrigger>
                  <TabsTrigger value="costs">磨损（成本）</TabsTrigger>
                  <TabsTrigger value="revenue">收益</TabsTrigger>
                </TabsList>

                <TabsContent value="points" className="space-y-4">
                  <div className="mb-4 flex gap-2 items-end">
                    <div className="flex-1">
                      <label className="text-sm font-medium mb-1 block">添加新日期</label>
                      <Input
                        type="text"
                        placeholder="YYYY-MM-DD"
                        value={newDate}
                        onChange={(e) => setNewDate(e.target.value)}
                      />
                    </div>
                    <Button onClick={() => {
                      if (newDate && !getAllDates().includes(newDate)) {
                        setNewDate(new Date().toISOString().split('T')[0]);
                      }
                    }}>
                      添加日期
                    </Button>
                  </div>

                  <div className="overflow-x-auto">
                    <table className="w-full text-xs border-collapse">
                      <thead>
                        <tr className="border-b">
                          <th className="p-2 text-left sticky left-0 bg-background border-r font-medium">日期</th>
                          {users.map(user => (
                            <th key={user.id} colSpan={5} className="p-2 text-center border-r">
                              <div className="font-medium">{user.name}</div>
                              <div className="text-xs text-blue-600 font-semibold">积分: {getCurrentCyclePoints(user.pointRecords)}</div>
                            </th>
                          ))}
                        </tr>
                        <tr className="border-b bg-muted/30">
                          <th className="p-2 sticky left-0 bg-muted/30"></th>
                          {users.map(user => (
                            <React.Fragment key={user.id}>
                              <th className="p-1 text-center text-[10px]">余额</th>
                              <th className="p-1 text-center text-[10px]">交易</th>
                              <th className="p-1 text-center text-[10px]">活动</th>
                              <th className="p-1 text-center text-[10px]">消耗</th>
                              <th className="p-1 text-center text-[10px] border-r bg-blue-50">合计</th>
                            </React.Fragment>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        {getAllDates().map((date) => (
                          <tr key={date} className="border-b hover:bg-muted/20">
                            <td className="p-2 sticky left-0 bg-background border-r font-medium whitespace-nowrap">{date}</td>
                            {users.map(user => {
                              const record = user.pointRecords.find(r => r.date === date);
                              const total = record ? record.balanceReward + record.tradeReward + record.activityPoints - record.claimCost : 0;
                              return (
                                <React.Fragment key={user.id}>
                                  <td className="p-0">
                                    <input
                                      type="number"
                                      className="w-full h-8 px-1 text-center border-0 bg-transparent focus:bg-yellow-50"
                                      value={record?.balanceReward || ''}
                                      onChange={(e) => updatePointCell(user.id, date, 'balanceReward', Number(e.target.value) || 0)}
                                      placeholder="0"
                                    />
                                  </td>
                                  <td className="p-0">
                                    <input
                                      type="number"
                                      className="w-full h-8 px-1 text-center border-0 bg-transparent focus:bg-yellow-50"
                                      value={record?.tradeReward || ''}
                                      onChange={(e) => updatePointCell(user.id, date, 'tradeReward', Number(e.target.value) || 0)}
                                      placeholder="0"
                                    />
                                  </td>
                                  <td className="p-0">
                                    <input
                                      type="number"
                                      className="w-full h-8 px-1 text-center border-0 bg-transparent focus:bg-yellow-50"
                                      value={record?.activityPoints || ''}
                                      onChange={(e) => updatePointCell(user.id, date, 'activityPoints', Number(e.target.value) || 0)}
                                      placeholder="0"
                                    />
                                  </td>
                                  <td className="p-0">
                                    <input
                                      type="number"
                                      className="w-full h-8 px-1 text-center border-0 bg-transparent focus:bg-yellow-50"
                                      value={record?.claimCost || ''}
                                      onChange={(e) => updatePointCell(user.id, date, 'claimCost', Number(e.target.value) || 0)}
                                      placeholder="0"
                                    />
                                  </td>
                                  <td className="p-2 text-center border-r bg-blue-50 font-semibold">
                                    <span className={total > 0 ? 'text-green-600' : total < 0 ? 'text-red-600' : ''}>{total}</span>
                                  </td>
                                </React.Fragment>
                              );
                            })}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </TabsContent>

                <TabsContent value="costs" className="space-y-4">
                  <div className="mb-4 flex gap-2 items-end">
                    <div className="flex-1">
                      <label className="text-sm font-medium mb-1 block">添加新日期</label>
                      <Input
                        type="text"
                        placeholder="YYYY-MM-DD"
                        value={newDate}
                        onChange={(e) => setNewDate(e.target.value)}
                      />
                    </div>
                    <Button onClick={() => {
                      if (newDate && !getAllDates().includes(newDate)) {
                        setNewDate(new Date().toISOString().split('T')[0]);
                      }
                    }}>
                      添加日期
                    </Button>
                  </div>

                  <div className="overflow-x-auto">
                    <table className="w-full text-xs border-collapse">
                      <thead>
                        <tr className="border-b">
                          <th className="p-2 text-left sticky left-0 bg-background border-r font-medium">日期</th>
                          {users.map(user => (
                            <th key={user.id} className="p-2 text-center border-r">
                              <div className="font-medium">{user.name}</div>
                              <div className="text-xs text-red-600 font-semibold">
                                总计: ${user.costRecords.reduce((sum, r) => sum + r.fee, 0).toFixed(2)}
                              </div>
                            </th>
                          ))}
                        </tr>
                        <tr className="border-b bg-muted/30">
                          <th className="p-2 sticky left-0 bg-muted/30"></th>
                          {users.map(user => (
                            <th key={user.id} className="p-1 text-center text-[10px]">手续费 (USD)</th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        {getAllDates().map((date) => (
                          <tr key={date} className="border-b hover:bg-muted/20">
                            <td className="p-2 sticky left-0 bg-background border-r font-medium whitespace-nowrap">{date}</td>
                            {users.map(user => {
                              const record = user.costRecords.find(r => r.date === date);
                              return (
                                <td key={user.id} className="p-0 border-r">
                                  <input
                                    type="number"
                                    step="0.01"
                                    className="w-full h-8 px-1 text-center border-0 bg-transparent focus:bg-yellow-50"
                                    value={record?.fee || ''}
                                    onChange={(e) => updateCostCell(user.id, date, Number(e.target.value) || 0)}
                                    placeholder="0.00"
                                  />
                                </td>
                              );
                            })}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </TabsContent>

                <TabsContent value="revenue" className="space-y-4">
                  <div className="mb-4 flex gap-2 items-end">
                    <div className="flex-1">
                      <label className="text-sm font-medium mb-1 block">添加新日期</label>
                      <Input
                        type="text"
                        placeholder="YYYY-MM-DD"
                        value={newDate}
                        onChange={(e) => setNewDate(e.target.value)}
                      />
                    </div>
                    <Button onClick={() => {
                      if (newDate && !getAllDates().includes(newDate)) {
                        setNewDate(new Date().toISOString().split('T')[0]);
                      }
                    }}>
                      添加日期
                    </Button>
                  </div>

                  <div className="overflow-x-auto">
                    <table className="w-full text-xs border-collapse">
                      <thead>
                        <tr className="border-b">
                          <th className="p-2 text-left sticky left-0 bg-background border-r font-medium">日期</th>
                          {users.map(user => (
                            <th key={user.id} className="p-2 text-center border-r">
                              <div className="font-medium">{user.name}</div>
                              <div className="text-xs text-green-600 font-semibold">
                                总计: ${user.revenueRecords.reduce((sum, r) => sum + r.amount, 0).toFixed(2)}
                              </div>
                            </th>
                          ))}
                        </tr>
                        <tr className="border-b bg-muted/30">
                          <th className="p-2 sticky left-0 bg-muted/30"></th>
                          {users.map(user => (
                            <th key={user.id} className="p-1 text-center text-[10px]">空投收益 (USD)</th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        {getAllDates().map((date) => {
                          const today = new Date().toISOString().split('T')[0];
                          return (
                            <tr key={date} className={`border-b hover:bg-muted/20 ${date === today ? 'bg-green-50' : ''}`}>
                              <td className={`p-2 sticky left-0 ${date === today ? 'bg-green-50' : 'bg-background'} border-r font-medium whitespace-nowrap`}>
                                {date} {date === today && <span className="text-xs text-green-600">(今天)</span>}
                              </td>
                              {users.map(user => {
                                const record = user.revenueRecords.find(r => r.date === date);
                                return (
                                  <td key={user.id} className="p-0 border-r">
                                    <input
                                      type="number"
                                      step="0.01"
                                      className="w-full h-8 px-1 text-center border-0 bg-transparent focus:bg-yellow-50"
                                      value={record?.amount || ''}
                                      onChange={(e) => updateRevenueCell(user.id, date, Number(e.target.value) || 0)}
                                      placeholder="0.00"
                                    />
                                  </td>
                                );
                              })}
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                  </div>
                          </p>
                        </div>
                        <div className="text-center">
                          <p className="text-sm text-muted-foreground">月（30天）</p>
                          <p className="text-xl font-bold text-red-600">
                            ${calculatePeriodStats(selectedUser.costRecords, 30).toFixed(2)}
                          </p>
                        </div>
                        <div className="text-center">
                          <p className="text-sm text-muted-foreground">季度（90天）</p>
                          <p className="text-xl font-bold text-red-600">
                            ${calculatePeriodStats(selectedUser.costRecords, 90).toFixed(2)}
                          </p>
                        </div>
                        <div className="text-center">
                          <p className="text-sm text-muted-foreground">年（365天）</p>
                          <p className="text-xl font-bold text-red-600">
                            ${calculatePeriodStats(selectedUser.costRecords, 365).toFixed(2)}
                          </p>
                        </div>
                        <div className="text-center">
                          <p className="text-sm text-muted-foreground">总磨损</p>
                          <p className="text-xl font-bold text-red-700">
                            ${selectedUser.costRecords.reduce((sum, r) => sum + r.fee, 0).toFixed(2)}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <div className="mb-4 p-4 bg-muted/30 rounded-lg">
                    <label className="text-sm font-medium mb-2 block">选择用户</label>
                    <select
                      className="w-full h-10 px-3 rounded-md border border-input bg-background"
                      value={selectedUserId}
                      onChange={(e) => setSelectedUserId(e.target.value)}
                    >
                      <option value="">-- 请选择用户 --</option>
                      {users.map(user => (
                        <option key={user.id} value={user.id}>
                          {user.name} (积分: {getCurrentCyclePoints(user.pointRecords)})
                        </option>
                      ))}
                    </select>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end" onKeyDown={(e) => e.key === 'Enter' && addCostRecord()}>
                    <div>
                      <label className="text-sm font-medium mb-1 block">日期</label>
                      <Input
                        type="text"
                        placeholder="YYYY-MM-DD"
                        value={costForm.date}
                        onChange={(e) => setCostForm({ ...costForm, date: e.target.value })}
                      />
                    </div>
                    <div>
                      <label className="text-sm font-medium mb-1 block">手续费（USD）</label>
                      <Input
                        type="number"
                        step="0.01"
                        min="0"
                        value={costForm.fee}
                        onChange={(e) => setCostForm({ ...costForm, fee: Number(e.target.value) })}
                        placeholder="0.00"
                      />
                    </div>
                    <Button onClick={addCostRecord}>添加/更新</Button>
                  </div>

                  <div className="text-xs">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead className="py-2">日期</TableHead>
                          <TableHead className="text-right py-2">手续费（USD）</TableHead>
                          <TableHead className="text-right py-2">操作</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {[...selectedUser.costRecords]
                          .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
                          .map((record, idx) => (
                            <TableRow key={idx}>
                              <TableCell className="py-2">{record.date}</TableCell>
                              <TableCell className="text-right py-2">${record.fee.toFixed(2)}</TableCell>
                              <TableCell className="text-right py-2">
                                <div className="flex gap-1 justify-end">
                                  <Button
                                    variant="ghost"
                                    size="icon"
                                    onClick={() => editCostRecord(record)}
                                    className="h-6 w-6"
                                  >
                                    <Edit2 className="h-3 w-3" />
                                  </Button>
                                  <AlertDialog>
                                    <AlertDialogTrigger asChild>
                                      <Button
                                        variant="ghost"
                                        size="icon"
                                        className="h-6 w-6"
                                      >
                                        <Trash2 className="h-3 w-3 text-destructive" />
                                      </Button>
                                    </AlertDialogTrigger>
                                    <AlertDialogContent>
                                      <AlertDialogHeader>
                                        <AlertDialogTitle>确认删除</AlertDialogTitle>
                                        <AlertDialogDescription>
                                          确定要删除 {record.date} 的成本记录吗？
                                        </AlertDialogDescription>
                                      </AlertDialogHeader>
                                      <AlertDialogFooter>
                                        <AlertDialogCancel>取消</AlertDialogCancel>
                                        <AlertDialogAction onClick={() => deleteCostRecord(record.date)}>删除</AlertDialogAction>
                                      </AlertDialogFooter>
                                    </AlertDialogContent>
                                  </AlertDialog>
                                </div>
                              </TableCell>
                            </TableRow>
                          ))}
                      </TableBody>
                    </Table>
                  </div>
                </TabsContent>

                <TabsContent value="revenue" className="space-y-4">
                  <Card className="bg-green-50 border-green-200">
                    <CardContent className="pt-6">
                      <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                        <div className="text-center">
                          <p className="text-sm text-muted-foreground">周期（15天）</p>
                          <p className="text-xl font-bold text-green-600">
                            ${calculatePeriodStats(selectedUser.revenueRecords, 15).toFixed(2)}
                          </p>
                        </div>
                        <div className="text-center">
                          <p className="text-sm text-muted-foreground">月（30天）</p>
                          <p className="text-xl font-bold text-green-600">
                            ${calculatePeriodStats(selectedUser.revenueRecords, 30).toFixed(2)}
                          </p>
                        </div>
                        <div className="text-center">
                          <p className="text-sm text-muted-foreground">季度（90天）</p>
                          <p className="text-xl font-bold text-green-600">
                            ${calculatePeriodStats(selectedUser.revenueRecords, 90).toFixed(2)}
                          </p>
                        </div>
                        <div className="text-center">
                          <p className="text-sm text-muted-foreground">年（365天）</p>
                          <p className="text-xl font-bold text-green-600">
                            ${calculatePeriodStats(selectedUser.revenueRecords, 365).toFixed(2)}
                          </p>
                        </div>
                        <div className="text-center">
                          <p className="text-sm text-muted-foreground">总收益</p>
                          <p className="text-xl font-bold text-green-700">
                            ${selectedUser.revenueRecords.reduce((sum, r) => sum + r.amount, 0).toFixed(2)}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <div className="mb-4 p-4 bg-muted/30 rounded-lg">
                    <label className="text-sm font-medium mb-2 block">选择用户</label>
                    <select
                      className="w-full h-10 px-3 rounded-md border border-input bg-background"
                      value={selectedUserId}
                      onChange={(e) => setSelectedUserId(e.target.value)}
                    >
                      <option value="">-- 请选择用户 --</option>
                      {users.map(user => (
                        <option key={user.id} value={user.id}>
                          {user.name} (积分: {getCurrentCyclePoints(user.pointRecords)})
                        </option>
                      ))}
                    </select>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end" onKeyDown={(e) => e.key === 'Enter' && addRevenueRecord()}>
                    <div>
                      <label className="text-sm font-medium mb-1 block">日期</label>
                      <Input
                        type="text"
                        placeholder="YYYY-MM-DD"
                        value={revenueForm.date}
                        onChange={(e) => setRevenueForm({ ...revenueForm, date: e.target.value })}
                      />
                    </div>
                    <div>
                      <label className="text-sm font-medium mb-1 block">空投收益（USD）</label>
                      <Input
                        type="number"
                        step="0.01"
                        min="0"
                        value={revenueForm.amount}
                        onChange={(e) => setRevenueForm({ ...revenueForm, amount: Number(e.target.value) })}
                        placeholder="0.00"
                      />
                    </div>
                    <Button onClick={addRevenueRecord}>添加/更新</Button>
                  </div>

                  <div className="text-xs">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead className="py-2">日期</TableHead>
                          <TableHead className="text-right py-2">空投收益（USD）</TableHead>
                          <TableHead className="text-right py-2">操作</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {[...selectedUser.revenueRecords]
                          .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
                          .map((record, idx) => (
                            <TableRow key={idx}>
                              <TableCell className="py-2">{record.date}</TableCell>
                              <TableCell className="text-right text-green-600 font-semibold py-2">
                                ${record.amount.toFixed(2)}
                              </TableCell>
                              <TableCell className="text-right py-2">
                                <div className="flex gap-1 justify-end">
                                  <Button
                                    variant="ghost"
                                    size="icon"
                                    onClick={() => editRevenueRecord(record)}
                                    className="h-6 w-6"
                                  >
                                    <Edit2 className="h-3 w-3" />
                                  </Button>
                                  <AlertDialog>
                                    <AlertDialogTrigger asChild>
                                      <Button
                                        variant="ghost"
                                        size="icon"
                                        className="h-6 w-6"
                                      >
                                        <Trash2 className="h-3 w-3 text-destructive" />
                                      </Button>
                                    </AlertDialogTrigger>
                                    <AlertDialogContent>
                                      <AlertDialogHeader>
                                        <AlertDialogTitle>确认删除</AlertDialogTitle>
                                        <AlertDialogDescription>
                                          确定要删除 {record.date} 的收益记录吗？
                                        </AlertDialogDescription>
                                      </AlertDialogHeader>
                                      <AlertDialogFooter>
                                        <AlertDialogCancel>取消</AlertDialogCancel>
                                        <AlertDialogAction onClick={() => deleteRevenueRecord(record.date)}>删除</AlertDialogAction>
                                      </AlertDialogFooter>
                                    </AlertDialogContent>
                                  </AlertDialog>
                                </div>
                              </TableCell>
                            </TableRow>
                          ))}
                      </TableBody>
                    </Table>
                  </div>
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
